{"version":3,"sources":["components/navbar/index.js","components/header/index.js","services/api.js","components/story/index.js","components/story-wrapper/index.js","components/newstories/index.js","components/topstories/index.js","components/beststories/index.js","components/reply-wrapper/index.js","components/comment/index.js","components/comment-section/index.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","title","NavLink","to","Header","components_navbar","getStoryType","type","getStories","getStoryList","storyType","axios","get","concat","getItem","id","Story","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","story","_this2","API","then","res","setState","data","catch","err","href","url","by","Date","time","toLocaleString","Link","descendants","React","Component","StoryWrapper","stories","length","map","components_story","key","NewStories","loadMoreStories","pageNo","isLoaded","itemsPerPage","components_story_wrapper","slice","onClick","TopStories","BestStories","ReplyWrapper","values","kids","components_comment","Comment","toggleReplies","undefined","comment","toggleReply","dangerouslySetInnerHTML","__html","text","keys","reply_wrapper","CommentSection","match","params","App","components_header","Route","path","component","Boolean","window","location","hostname","ReactDOM","render","BrowserRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.86b3c307.chunk.js","sourcesContent":["import React from 'react';\nimport './index.css';\nimport { NavLink } from 'react-router-dom';\n\n\n/**\n * Functional component for Navbar.\n * \n * @param {*} props \n */\nconst Navbar = (props) => {\n\n  return (\n\n    <div className='navbar'>\n      <ul>\n        <li\n          className='nav-item'\n          title='newstories'>\n          <NavLink to='/newstories'>New Stories</NavLink>\n        </li>\n        <li\n          className='nav-item'\n          title='topstories'>\n          <NavLink to='/topstories'>Top Stories</NavLink>\n        </li>\n        <li\n          className='nav-item'\n          title='beststories'>\n          <NavLink to='/beststories'>Best Stories</NavLink>\n        </li>\n      </ul>\n    </div>\n\n  )\n}\n\nexport default Navbar;","import React from 'react';\nimport Navbar from '../navbar';\nimport './index.css';\n\n/**\n * Functional component for Header.\n * \n * @param {*} props \n */\nconst Header = (props) => {\n\n  return (\n    <div className='header'>\n      <div className='title'>\n        <h1>Roit Hackernews</h1>\n      </div>\n      <Navbar\n        getStoryType={(type) => props.getStories(type)} />\n    </div>\n  )\n}\n\nexport default Header;","import axios from 'axios';\n\n/**\n * .Function to get top stories data from hackernews api.\n * \n * @param {*} storyType\n */\nconst getStoryList = (storyType) => {\n return axios.get(`https://hacker-news.firebaseio.com/v0/${storyType}.json`);\n};\n\n/**\n * .Function to get individual item data from hackernews api.\n * \n * @param {*} id\n */\nconst getItem = (id) => {\n  return axios.get(`https://hacker-news.firebaseio.com/v0/item/${id}.json`);\n};\n\n\nexport { getStoryList, getItem };\n","import React from 'react';\nimport * as API from '../../services/api';\nimport './index.css';\nimport { Link } from 'react-router-dom';\n\n\n\n/**\n * Story component for individual Story.\n * \n */\nclass Story extends React.Component {\n\n  /**\n   * Constructor for Story class.\n   * \n   * @param {*} props \n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      story: {}\n    };\n\n  }\n\n  /**\n   * Function to call to the api to get story.\n   */\n  componentDidMount() {\n    API.getItem(this.props.id)\n      .then(res => this.setState({ story: res.data }))\n      .catch(err => err);\n  }\n\n  /**\n   * Function to Reder Story jsx.\n   */\n  render() {\n    return (\n      <div className='story'>\n        <h3><a href={this.state.story.url}>{this.state.story.title}</a></h3>\n        <div className='story-details'>\n          <span>By: {this.state.story.by}</span>\n          <span>on : {Date(this.state.story.time).toLocaleString()}</span>\n          <span>\n            <Link to= {`/comments/${this.props.id}`}>\n              {this.state.story.descendants} comments\n            </Link>\n          </span>\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default Story;\n","import React from 'react';\nimport Story from '../story';\nimport './index.css';\n\n/**\n * Stateless Component to wrap all stories.\n * \n * @param {*} props \n */\nconst StoryWrapper = (props) => {\n\n  /**\n   * \n   */\n  return (\n    <div className='story-wrapper'>\n      {(props.stories.length !== 0) ?\n        props.stories.map(id =>\n          <Story\n            key={id}\n            id={id}\n          />\n        )\n        : <div>\n          <h1>No Stories</h1>\n        </div>\n      }\n\n    </div>\n  );\n};\n\n\nexport default StoryWrapper;\n","import React from 'react';\nimport StoryWrapper from '../story-wrapper';\nimport * as API from '../../services/api.js';\nimport './index.css';\n\n/**\n * Component for New Stories.\n */\nclass NewStories extends React.Component {\n\n  /**\n   * \n   * @param {*} props \n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoaded: false,\n      stories: [],\n      pageNo: 1,\n      itemsPerPage: 20\n    };\n  }\n\n  /**\n   * Function to call API and get new stories.\n   */\n  componentDidMount() {\n    API.getStoryList('newstories')\n      .then(res => this.setState({ isLoaded: true, stories: res.data }))\n      .catch(err => err);\n  }\n\n  loadMoreStories = () => {\n    this.setState({ pageNo: this.state.pageNo + 1 });\n  }\n\n  /**\n   * Function to render jsx.\n   */\n  render() {\n    return (\n      this.state.isLoaded\n        ? <div>\n          <StoryWrapper\n            key='newstories'\n            stories={this.state.stories.slice(\n              0,\n              this.state.pageNo * this.state.itemsPerPage)}\n          />\n          <div\n            className='pagination'\n            onClick={this.loadMoreStories}\n          >\n            <p>Load More</p>\n          </div>\n        </div>\n        : <h2>Loadiing...</h2>\n\n    );\n  }\n}\n\nexport default NewStories;\n","import React from 'react';\nimport StoryWrapper from '../story-wrapper';\nimport * as API from '../../services/api.js';\n\n/**\n * Component for top Stories.\n */\nclass TopStories extends React.Component {\n\n  /**\n   * \n   * @param {*} props \n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoaded: false,\n      stories: [],\n      pageNo: 1,\n      itemsPerPage: 20\n    };\n  }\n\n  /**\n   * Function to call API and get top stories.\n   */\n  componentDidMount() {\n    API.getStoryList('topstories')\n      .then(res => this.setState({ isLoaded: true, stories: res.data }))\n      .catch(err => err);\n  }\n\n  loadMoreStories = () => {\n    this.setState({ pageNo: this.state.pageNo + 1 });\n  }\n\n\n  /**\n   * \n   */\n  render() {\n    return (\n      this.state.isLoaded\n        ? <div>\n          <StoryWrapper\n            key='newstories'\n            stories={this.state.stories.slice(\n              0,\n              this.state.pageNo * this.state.itemsPerPage)}\n          />\n          <div\n            className='pagination'\n            onClick={this.loadMoreStories}\n          >\n            <p>Load More</p>\n          </div>\n        </div>\n        : <h2>Loadiing...</h2>\n    );\n  }\n}\n\nexport default TopStories;\n","import React from 'react';\nimport StoryWrapper from '../story-wrapper';\nimport * as API from '../../services/api.js';\n\n/**\n * Component for best Stories.\n */\nclass BestStories extends React.Component {\n\n  /**\n   * \n   * @param {*} props \n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoaded: false,\n      stories: [],\n      pageNo: 1,\n      itemsPerPage: 20\n    };\n  }\n\n  /**\n   * Function to call API and get best stories.\n   */\n  componentDidMount() {\n    API.getStoryList('beststories')\n      .then(res => this.setState({ isLoaded: true, stories: res.data }))\n      .catch(err => err);\n  }\n\n  loadMoreStories = () => {\n    this.setState({ pageNo: this.state.pageNo + 1 });\n  }\n\n\n  /**\n   * \n   */\n  render() {\n    return (\n      this.state.isLoaded\n        ? <div>\n          <StoryWrapper\n            key='beststories'\n            stories={this.state.stories.slice(\n              0,\n              this.state.pageNo * this.state.itemsPerPage)}\n          />\n          <div\n            className='pagination'\n            onClick={this.loadMoreStories}\n          >\n            <p>Load More</p>\n          </div>\n        </div>\n        : <h2>Loadiing...</h2>\n    );\n  }\n}\n\nexport default BestStories;\n","import React from 'react';\nimport Comment from '../comment';\n\n/**\n * Stateless component to render comment replies.\n * \n * @param {*} props \n */\nconst ReplyWrapper = (props) => {\n\n  /**\n   * \n   */\n  return (\n    <div>\n      {Object.values(props.kids).map(id =>\n        <Comment\n          key={id}\n          id={id}\n        />\n      )}\n    </div>\n  )\n}\n\nexport default ReplyWrapper;","import React from 'react';\nimport * as API from '../../services/api';\nimport './index.css';\nimport ReplyWrapper from '../reply-wrapper';\n\n\n/**\n * Component to show comments.\n */\nclass Comment extends React.Component {\n\n  /**\n   * \n   * @param {*} props \n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      comment: {},\n      toggleReply: false\n    };\n  }\n\n  toggleReplies = () => {\n    if (this.state.comment.kids !== undefined) {\n      if (this.state.toggleReply) {\n        this.setState({ toggleReply: false });\n      } else {\n        this.setState({ toggleReply: true });\n      }\n    }\n\n  }\n\n  /**\n   * Function to call API to get comment Data.\n   */\n  componentDidMount() {\n    API.getItem(this.props.id)\n      .then(res => this.setState({ comment: res.data }))\n      .catch(err => err);\n  }\n\n  /**\n   * Function to render JSX.\n   */\n  render() {\n    return (\n      <div className='comment clearfix'>\n        <h4>By: {this.state.comment.by}</h4>\n        <p dangerouslySetInnerHTML={{ __html: this.state.comment.text }}>\n        </p>\n        <div className='comment-details'>\n          <span>on: {this.state.comment.time}</span>\n          <span className=\"reply\" onClick={this.toggleReplies}>\n            {(this.state.comment.kids !== undefined)\n              ? Object.keys(this.state.comment.kids).length : 0} Replies\n          </span>\n        </div>\n        {this.state.toggleReply ?\n          <ReplyWrapper\n            kids={this.state.comment.kids}\n          />\n          : <div></div>}\n      </div>\n    );\n  }\n}\n\nexport default Comment;\n\n\n","import React from 'react';\nimport Comment from '../comment';\nimport * as API from '../../services/api';\n\n/**\n * Component to wrap all comments of a story.\n * \n */\nclass CommentSection extends React.Component {\n  /**\n   * \n   * @param {*} props \n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      kids: []\n    };\n  }\n\n  /**\n   * Function to get comments from API through url param id.\n   */\n  componentDidMount() {\n    API.getItem(this.props.match.params.id)\n      .then(res => this.setState({ kids: res.data.kids }))\n      .catch(err => err);\n  }\n\n\n  /**\n   * Function to render jsx for comments.\n   */\n  render() {\n    return (\n      <div>\n        {(this.state.kids !== undefined) ?\n          this.state.kids.map(id =>\n            <Comment\n              key={id}\n              id={id}\n            />\n          )\n          : <h1>No Comments Yet</h1>\n        }\n      </div>\n    )\n  }\n\n}\nexport default CommentSection;","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './components/header';\nimport * as API from './services/api';\n\nimport { Route } from 'react-router-dom';\nimport NewStories from './components/newstories';\nimport TopStories from './components/topstories';\nimport BestStories from './components/beststories';\nimport CommentSection from './components/comment-section';\n\n\n\n/**\n * App Class to render all components and include the app logic.\n * \n */\nclass App extends Component {\n\n  /**\n   * \n   * @param {*} props \n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      stories: []\n    };\n\n  }\n\n\n  /**\n   * Calls getStories function.\n   */\n  componentDidMount() {\n    // this.getStories('topstories');\n  }\n\n  /**\n   * Function to call hackernews api to get stories id array and keep it in state.\n   * \n   * @param {string} storyType \n   */\n  getStories = (storyType) => {\n    API.getStoryList(storyType)\n      .then(res => this.setState({ stories: res.data }))\n      .catch(err => err);\n  }\n\n\n\n  /**\n   * \n   */\n  render() {\n    return (\n      <div className=\"\">\n        <Header\n        />\n        <div>\n          <Route path=\"/newstories\" component={NewStories} />\n          <Route path=\"/topstories\" component={TopStories} />\n          <Route path=\"/beststories\" component={BestStories} />\n          <Route path=\"/comments/:id\" component={CommentSection}/>\n        </div>\n      </div>\n        \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter as Router} from 'react-router-dom';\n\nReactDOM.render(<Router><App /></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}